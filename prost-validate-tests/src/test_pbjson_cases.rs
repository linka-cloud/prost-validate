#[allow(unused)]
macro_rules! test_cases {
    ($($name:ident,)*) => {
        $(
            #[cfg(test)]
            mod $name {
                #[cfg(feature = "reflect")]
                use prost_reflect_validate::ValidatorExt;
                #[cfg(feature = "derive")]
                use prost_validate::Validator as ValidatorDerive;

                #[cfg(feature = "reflect")]
                #[test]
                fn reflect() {
                    let (message, failures) = crate::cases_pbjson::CASES.get(stringify!($name)).unwrap()();
                    match ValidatorExt::validate(&*message) {
                        Err(err) => {
                            println!("{}", err);
                            assert!(failures > 0, "unexpected validation failure: {err}");
                        },
                        Ok(_) => assert_eq!(failures, 0, "unexpected validation success"),
                    }
                }

                #[cfg(feature = "derive")]
                #[test]
                fn derive() {
                    let (message, failures) = crate::cases_pbjson::CASES.get(stringify!($name)).unwrap()();
                    match ValidatorDerive::validate(&*message) {
                        Err(err) => {
                            println!("{}", err);
                            assert!(failures > 0, "unexpected validation failure: {err}");
                        },
                        Ok(_) => assert_eq!(failures, 0, "unexpected validation success"),
                    }
                }

                #[cfg(feature = "derive")]
                #[test]
                fn derive_all() {
                    let (message, failures) = crate::cases_pbjson::CASES.get(stringify!($name)).unwrap()();
                    match ValidatorDerive::validate_all(message.as_ref()) {
                        Ok(()) => assert_eq!(failures, 0, "unexpected validation success"),
                        Err(errs) => {
                            println!("{errs:?}");
                            assert_eq!(failures as usize, errs.len(), "unexpected validation failures: {errs:?}");
                        },
                    }
                }
            }
        )*
    }
}

#[cfg(test)]
mod float {
    test_cases![
        float_none_valid,
        float_const_valid,
        float_const_invalid,
        float_in_valid,
        float_in_invalid,
        float_not_in_valid,
        float_not_in_invalid,
        float_lt_valid,
        float_lt_invalid_equal,
        float_lt_invalid,
        float_lte_valid,
        float_lte_valid_equal,
        float_lte_invalid,
        float_gt_valid,
        float_gt_invalid_equal,
        float_gt_invalid,
        float_gte_valid,
        float_gte_valid_equal,
        float_gte_invalid,
        float_gt_lt_valid,
        float_gt_lt_invalid_above,
        float_gt_lt_invalid_below,
        float_gt_lt_invalid_max,
        float_gt_lt_invalid_min,
        float_exclusive_gt_lt_valid_above,
        float_exclusive_gt_lt_valid_below,
        float_exclusive_gt_lt_invalid,
        float_exclusive_gt_lt_invalid_max,
        float_exclusive_gt_lt_invalid_min,
        float_gte_lte_valid,
        float_gte_lte_valid_max,
        float_gte_lte_valid_min,
        float_gte_lte_invalid_above,
        float_gte_lte_invalid_below,
        float_exclusive_gte_lte_valid_above,
        float_exclusive_gte_lte_valid_below,
        float_exclusive_gte_lte_valid_max,
        float_exclusive_gte_lte_valid_min,
        float_exclusive_gte_lte_invalid,
        float_ignore_empty_gte_lte_valid,
    ];
}
#[cfg(test)]
mod double {

    test_cases![
        double_none_valid,
        double_const_valid,
        double_const_invalid,
        double_in_valid,
        double_in_invalid,
        double_not_in_valid,
        double_not_in_invalid,
        double_lt_valid,
        double_lt_invalid_equal,
        double_lt_invalid,
        double_lte_valid,
        double_lte_valid_equal,
        double_lte_invalid,
        double_gt_valid,
        double_gt_invalid_equal,
        double_gt_invalid,
        double_gte_valid,
        double_gte_valid_equal,
        double_gte_invalid,
        double_gt_lt_valid,
        double_gt_lt_invalid_above,
        double_gt_lt_invalid_below,
        double_gt_lt_invalid_max,
        double_gt_lt_invalid_min,
        double_exclusive_gt_lt_valid_above,
        double_exclusive_gt_lt_valid_below,
        double_exclusive_gt_lt_invalid,
        double_exclusive_gt_lt_invalid_max,
        double_exclusive_gt_lt_invalid_min,
        double_gte_lte_valid,
        double_gte_lte_valid_max,
        double_gte_lte_valid_min,
        double_gte_lte_invalid_above,
        double_gte_lte_invalid_below,
        double_exclusive_gte_lte_valid_above,
        double_exclusive_gte_lte_valid_below,
        double_exclusive_gte_lte_valid_max,
        double_exclusive_gte_lte_valid_min,
        double_exclusive_gte_lte_invalid,
        double_ignore_empty_gte_lte_valid,
    ];
}
#[cfg(test)]
mod int32 {

    test_cases![
        int32_none_valid,
        int32_const_valid,
        int32_const_invalid,
        int32_in_valid,
        int32_in_invalid,
        int32_not_in_valid,
        int32_not_in_invalid,
        int32_lt_valid,
        int32_lt_invalid_equal,
        int32_lt_invalid,
        int32_lte_valid,
        int32_lte_valid_equal,
        int32_lte_invalid,
        int32_gt_valid,
        int32_gt_invalid_equal,
        int32_gt_invalid,
        int32_gte_valid,
        int32_gte_valid_equal,
        int32_gte_invalid,
        int32_gt_lt_valid,
        int32_gt_lt_invalid_above,
        int32_gt_lt_invalid_below,
        int32_gt_lt_invalid_max,
        int32_gt_lt_invalid_min,
        int32_exclusive_gt_lt_valid_above,
        int32_exclusive_gt_lt_valid_below,
        int32_exclusive_gt_lt_invalid,
        int32_exclusive_gt_lt_invalid_max,
        int32_exclusive_gt_lt_invalid_min,
        int32_gte_lte_valid,
        int32_gte_lte_valid_max,
        int32_gte_lte_valid_min,
        int32_gte_lte_invalid_above,
        int32_gte_lte_invalid_below,
        int32_exclusive_gte_lte_valid_above,
        int32_exclusive_gte_lte_valid_below,
        int32_exclusive_gte_lte_valid_max,
        int32_exclusive_gte_lte_valid_min,
        int32_exclusive_gte_lte_invalid,
        int32_ignore_empty_gte_lte_valid,
    ];
}
#[cfg(test)]
mod int64 {

    test_cases![
        int64_none_valid,
        int64_const_valid,
        int64_const_invalid,
        int64_in_valid,
        int64_in_invalid,
        int64_not_in_valid,
        int64_not_in_invalid,
        int64_lt_valid,
        int64_lt_invalid_equal,
        int64_lt_invalid,
        int64_lte_valid,
        int64_lte_valid_equal,
        int64_lte_invalid,
        int64_gt_valid,
        int64_gt_invalid_equal,
        int64_gt_invalid,
        int64_gte_valid,
        int64_gte_valid_equal,
        int64_gte_invalid,
        int64_gt_lt_valid,
        int64_gt_lt_invalid_above,
        int64_gt_lt_invalid_below,
        int64_gt_lt_invalid_max,
        int64_gt_lt_invalid_min,
        int64_exclusive_gt_lt_valid_above,
        int64_exclusive_gt_lt_valid_below,
        int64_exclusive_gt_lt_invalid,
        int64_exclusive_gt_lt_invalid_max,
        int64_exclusive_gt_lt_invalid_min,
        int64_gte_lte_valid,
        int64_gte_lte_valid_max,
        int64_gte_lte_valid_min,
        int64_gte_lte_invalid_above,
        int64_gte_lte_invalid_below,
        int64_exclusive_gte_lte_valid_above,
        int64_exclusive_gte_lte_valid_below,
        int64_exclusive_gte_lte_valid_max,
        int64_exclusive_gte_lte_valid_min,
        int64_exclusive_gte_lte_invalid,
        int64_ignore_empty_gte_lte_valid,
        int64_optional_lte_valid,
        int64_optional_lte_valid_equal,
        int64_optional_lte_valid_unset,
    ];
}
#[cfg(test)]
mod uint32 {

    test_cases![
        uint32_none_valid,
        uint32_const_valid,
        uint32_const_invalid,
        uint32_in_valid,
        uint32_in_invalid,
        uint32_not_in_valid,
        uint32_not_in_invalid,
        uint32_lt_valid,
        uint32_lt_invalid_equal,
        uint32_lt_invalid,
        uint32_lte_valid,
        uint32_lte_valid_equal,
        uint32_lte_invalid,
        uint32_gt_valid,
        uint32_gt_invalid_equal,
        uint32_gt_invalid,
        uint32_gte_valid,
        uint32_gte_valid_equal,
        uint32_gte_invalid,
        uint32_gt_lt_valid,
        uint32_gt_lt_invalid_above,
        uint32_gt_lt_invalid_below,
        uint32_gt_lt_invalid_max,
        uint32_gt_lt_invalid_min,
        uint32_exclusive_gt_lt_valid_above,
        uint32_exclusive_gt_lt_valid_below,
        uint32_exclusive_gt_lt_invalid,
        uint32_exclusive_gt_lt_invalid_max,
        uint32_exclusive_gt_lt_invalid_min,
        uint32_gte_lte_valid,
        uint32_gte_lte_valid_max,
        uint32_gte_lte_valid_min,
        uint32_gte_lte_invalid_above,
        uint32_gte_lte_invalid_below,
        uint32_exclusive_gte_lte_valid_above,
        uint32_exclusive_gte_lte_valid_below,
        uint32_exclusive_gte_lte_valid_max,
        uint32_exclusive_gte_lte_valid_min,
        uint32_exclusive_gte_lte_invalid,
        uint32_ignore_empty_gte_lte_valid,
    ];
}
#[cfg(test)]
mod uint64 {

    test_cases![
        uint64_none_valid,
        uint64_const_valid,
        uint64_const_invalid,
        uint64_in_valid,
        uint64_in_invalid,
        uint64_not_in_valid,
        uint64_not_in_invalid,
        uint64_lt_valid,
        uint64_lt_invalid_equal,
        uint64_lt_invalid,
        uint64_lte_valid,
        uint64_lte_valid_equal,
        uint64_lte_invalid,
        uint64_gt_valid,
        uint64_gt_invalid_equal,
        uint64_gt_invalid,
        uint64_gte_valid,
        uint64_gte_valid_equal,
        uint64_gte_invalid,
        uint64_gt_lt_valid,
        uint64_gt_lt_invalid_above,
        uint64_gt_lt_invalid_below,
        uint64_gt_lt_invalid_max,
        uint64_gt_lt_invalid_min,
        uint64_exclusive_gt_lt_valid_above,
        uint64_exclusive_gt_lt_valid_below,
        uint64_exclusive_gt_lt_invalid,
        uint64_exclusive_gt_lt_invalid_max,
        uint64_exclusive_gt_lt_invalid_min,
        uint64_gte_lte_valid,
        uint64_gte_lte_valid_max,
        uint64_gte_lte_valid_min,
        uint64_gte_lte_invalid_above,
        uint64_gte_lte_invalid_below,
        uint64_exclusive_gte_lte_valid_above,
        uint64_exclusive_gte_lte_valid_below,
        uint64_exclusive_gte_lte_valid_max,
        uint64_exclusive_gte_lte_valid_min,
        uint64_exclusive_gte_lte_invalid,
        uint64_ignore_empty_gte_lte_valid,
    ];
}
#[cfg(test)]
mod sint32 {

    test_cases![
        sint32_none_valid,
        sint32_const_valid,
        sint32_const_invalid,
        sint32_in_valid,
        sint32_in_invalid,
        sint32_not_in_valid,
        sint32_not_in_invalid,
        sint32_lt_valid,
        sint32_lt_invalid_equal,
        sint32_lt_invalid,
        sint32_lte_valid,
        sint32_lte_valid_equal,
        sint32_lte_invalid,
        sint32_gt_valid,
        sint32_gt_invalid_equal,
        sint32_gt_invalid,
        sint32_gte_valid,
        sint32_gte_valid_equal,
        sint32_gte_invalid,
        sint32_gt_lt_valid,
        sint32_gt_lt_invalid_above,
        sint32_gt_lt_invalid_below,
        sint32_gt_lt_invalid_max,
        sint32_gt_lt_invalid_min,
        sint32_exclusive_gt_lt_valid_above,
        sint32_exclusive_gt_lt_valid_below,
        sint32_exclusive_gt_lt_invalid,
        sint32_exclusive_gt_lt_invalid_max,
        sint32_exclusive_gt_lt_invalid_min,
        sint32_gte_lte_valid,
        sint32_gte_lte_valid_max,
        sint32_gte_lte_valid_min,
        sint32_gte_lte_invalid_above,
        sint32_gte_lte_invalid_below,
        sint32_exclusive_gte_lte_valid_above,
        sint32_exclusive_gte_lte_valid_below,
        sint32_exclusive_gte_lte_valid_max,
        sint32_exclusive_gte_lte_valid_min,
        sint32_exclusive_gte_lte_invalid,
        sint32_ignore_empty_gte_lte_valid,
    ];
}
#[cfg(test)]
mod sint64 {

    test_cases![
        sint64_none_valid,
        sint64_const_valid,
        sint64_const_invalid,
        sint64_in_valid,
        sint64_in_invalid,
        sint64_not_in_valid,
        sint64_not_in_invalid,
        sint64_lt_valid,
        sint64_lt_invalid_equal,
        sint64_lt_invalid,
        sint64_lte_valid,
        sint64_lte_valid_equal,
        sint64_lte_invalid,
        sint64_gt_valid,
        sint64_gt_invalid_equal,
        sint64_gt_invalid,
        sint64_gte_valid,
        sint64_gte_valid_equal,
        sint64_gte_invalid,
        sint64_gt_lt_valid,
        sint64_gt_lt_invalid_above,
        sint64_gt_lt_invalid_below,
        sint64_gt_lt_invalid_max,
        sint64_gt_lt_invalid_min,
        sint64_exclusive_gt_lt_valid_above,
        sint64_exclusive_gt_lt_valid_below,
        sint64_exclusive_gt_lt_invalid,
        sint64_exclusive_gt_lt_invalid_max,
        sint64_exclusive_gt_lt_invalid_min,
        sint64_gte_lte_valid,
        sint64_gte_lte_valid_max,
        sint64_gte_lte_valid_min,
        sint64_gte_lte_invalid_above,
        sint64_gte_lte_invalid_below,
        sint64_exclusive_gte_lte_valid_above,
        sint64_exclusive_gte_lte_valid_below,
        sint64_exclusive_gte_lte_valid_max,
        sint64_exclusive_gte_lte_valid_min,
        sint64_exclusive_gte_lte_invalid,
        sint64_ignore_empty_gte_lte_valid,
    ];
}
#[cfg(test)]
mod fixed32 {

    test_cases![
        fixed32_none_valid,
        fixed32_const_valid,
        fixed32_const_invalid,
        fixed32_in_valid,
        fixed32_in_invalid,
        fixed32_not_in_valid,
        fixed32_not_in_invalid,
        fixed32_lt_valid,
        fixed32_lt_invalid_equal,
        fixed32_lt_invalid,
        fixed32_lte_valid,
        fixed32_lte_valid_equal,
        fixed32_lte_invalid,
        fixed32_gt_valid,
        fixed32_gt_invalid_equal,
        fixed32_gt_invalid,
        fixed32_gte_valid,
        fixed32_gte_valid_equal,
        fixed32_gte_invalid,
        fixed32_gt_lt_valid,
        fixed32_gt_lt_invalid_above,
        fixed32_gt_lt_invalid_below,
        fixed32_gt_lt_invalid_max,
        fixed32_gt_lt_invalid_min,
        fixed32_exclusive_gt_lt_valid_above,
        fixed32_exclusive_gt_lt_valid_below,
        fixed32_exclusive_gt_lt_invalid,
        fixed32_exclusive_gt_lt_invalid_max,
        fixed32_exclusive_gt_lt_invalid_min,
        fixed32_gte_lte_valid,
        fixed32_gte_lte_valid_max,
        fixed32_gte_lte_valid_min,
        fixed32_gte_lte_invalid_above,
        fixed32_gte_lte_invalid_below,
        fixed32_exclusive_gte_lte_valid_above,
        fixed32_exclusive_gte_lte_valid_below,
        fixed32_exclusive_gte_lte_valid_max,
        fixed32_exclusive_gte_lte_valid_min,
        fixed32_exclusive_gte_lte_invalid,
        fixed32_ignore_empty_gte_lte_valid,
    ];
}
#[cfg(test)]
mod fixed64 {

    test_cases![
        fixed64_none_valid,
        fixed64_const_valid,
        fixed64_const_invalid,
        fixed64_in_valid,
        fixed64_in_invalid,
        fixed64_not_in_valid,
        fixed64_not_in_invalid,
        fixed64_lt_valid,
        fixed64_lt_invalid_equal,
        fixed64_lt_invalid,
        fixed64_lte_valid,
        fixed64_lte_valid_equal,
        fixed64_lte_invalid,
        fixed64_gt_valid,
        fixed64_gt_invalid_equal,
        fixed64_gt_invalid,
        fixed64_gte_valid,
        fixed64_gte_valid_equal,
        fixed64_gte_invalid,
        fixed64_gt_lt_valid,
        fixed64_gt_lt_invalid_above,
        fixed64_gt_lt_invalid_below,
        fixed64_gt_lt_invalid_max,
        fixed64_gt_lt_invalid_min,
        fixed64_exclusive_gt_lt_valid_above,
        fixed64_exclusive_gt_lt_valid_below,
        fixed64_exclusive_gt_lt_invalid,
        fixed64_exclusive_gt_lt_invalid_max,
        fixed64_exclusive_gt_lt_invalid_min,
        fixed64_gte_lte_valid,
        fixed64_gte_lte_valid_max,
        fixed64_gte_lte_valid_min,
        fixed64_gte_lte_invalid_above,
        fixed64_gte_lte_invalid_below,
        fixed64_exclusive_gte_lte_valid_above,
        fixed64_exclusive_gte_lte_valid_below,
        fixed64_exclusive_gte_lte_valid_max,
        fixed64_exclusive_gte_lte_valid_min,
        fixed64_exclusive_gte_lte_invalid,
        fixed64_ignore_empty_gte_lte_valid,
    ];
}
#[cfg(test)]
mod sfixed32 {

    test_cases![
        sfixed32_none_valid,
        sfixed32_const_valid,
        sfixed32_const_invalid,
        sfixed32_in_valid,
        sfixed32_in_invalid,
        sfixed32_not_in_valid,
        sfixed32_not_in_invalid,
        sfixed32_lt_valid,
        sfixed32_lt_invalid_equal,
        sfixed32_lt_invalid,
        sfixed32_lte_valid,
        sfixed32_lte_valid_equal,
        sfixed32_lte_invalid,
        sfixed32_gt_valid,
        sfixed32_gt_invalid_equal,
        sfixed32_gt_invalid,
        sfixed32_gte_valid,
        sfixed32_gte_valid_equal,
        sfixed32_gte_invalid,
        sfixed32_gt_lt_valid,
        sfixed32_gt_lt_invalid_above,
        sfixed32_gt_lt_invalid_below,
        sfixed32_gt_lt_invalid_max,
        sfixed32_gt_lt_invalid_min,
        sfixed32_exclusive_gt_lt_valid_above,
        sfixed32_exclusive_gt_lt_valid_below,
        sfixed32_exclusive_gt_lt_invalid,
        sfixed32_exclusive_gt_lt_invalid_max,
        sfixed32_exclusive_gt_lt_invalid_min,
        sfixed32_gte_lte_valid,
        sfixed32_gte_lte_valid_max,
        sfixed32_gte_lte_valid_min,
        sfixed32_gte_lte_invalid_above,
        sfixed32_gte_lte_invalid_below,
        sfixed32_exclusive_gte_lte_valid_above,
        sfixed32_exclusive_gte_lte_valid_below,
        sfixed32_exclusive_gte_lte_valid_max,
        sfixed32_exclusive_gte_lte_valid_min,
        sfixed32_exclusive_gte_lte_invalid,
        sfixed32_ignore_empty_gte_lte_valid,
    ];
}
#[cfg(test)]
mod sfixed64 {

    test_cases![
        sfixed64_none_valid,
        sfixed64_const_valid,
        sfixed64_const_invalid,
        sfixed64_in_valid,
        sfixed64_in_invalid,
        sfixed64_not_in_valid,
        sfixed64_not_in_invalid,
        sfixed64_lt_valid,
        sfixed64_lt_invalid_equal,
        sfixed64_lt_invalid,
        sfixed64_lte_valid,
        sfixed64_lte_valid_equal,
        sfixed64_lte_invalid,
        sfixed64_gt_valid,
        sfixed64_gt_invalid_equal,
        sfixed64_gt_invalid,
        sfixed64_gte_valid,
        sfixed64_gte_valid_equal,
        sfixed64_gte_invalid,
        sfixed64_gt_lt_valid,
        sfixed64_gt_lt_invalid_above,
        sfixed64_gt_lt_invalid_below,
        sfixed64_gt_lt_invalid_max,
        sfixed64_gt_lt_invalid_min,
        sfixed64_exclusive_gt_lt_valid_above,
        sfixed64_exclusive_gt_lt_valid_below,
        sfixed64_exclusive_gt_lt_invalid,
        sfixed64_exclusive_gt_lt_invalid_max,
        sfixed64_exclusive_gt_lt_invalid_min,
        sfixed64_gte_lte_valid,
        sfixed64_gte_lte_valid_max,
        sfixed64_gte_lte_valid_min,
        sfixed64_gte_lte_invalid_above,
        sfixed64_gte_lte_invalid_below,
        sfixed64_exclusive_gte_lte_valid_above,
        sfixed64_exclusive_gte_lte_valid_below,
        sfixed64_exclusive_gte_lte_valid_max,
        sfixed64_exclusive_gte_lte_valid_min,
        sfixed64_exclusive_gte_lte_invalid,
        sfixed64_ignore_empty_gte_lte_valid,
    ];
}
#[cfg(test)]
mod bool {

    test_cases![
        bool_none_valid,
        bool_const_true_valid,
        bool_const_true_invalid,
        bool_const_false_valid,
        bool_const_false_invalid,
    ];
}
#[cfg(test)]
mod string {

    test_cases![
        string_none_valid,
        string_const_valid,
        string_const_invalid,
        string_in_valid,
        string_in_invalid,
        string_not_in_valid,
        string_not_in_invalid,
        string_len_valid,
        string_len_valid_multibyte,
        string_len_invalid_lt,
        string_len_invalid_gt,
        string_len_invalid_multibyte,
        string_min_len_valid,
        string_min_len_valid_min,
        string_min_len_invalid,
        string_min_len_invalid_multibyte,
        string_max_len_valid,
        string_max_len_valid_max,
        string_max_len_valid_multibyte,
        string_max_len_invalid,
        string_min_max_len_valid,
        string_min_max_len_valid_min,
        string_min_max_len_valid_max,
        string_min_max_len_valid_multibyte,
        string_min_max_len_invalid_below,
        string_min_max_len_invalid_above,
        string_equal_min_max_len_valid,
        string_equal_min_max_len_invalid,
        string_len_bytes_valid,
        string_len_bytes_invalid_lt,
        string_len_bytes_invalid_gt,
        string_len_bytes_invalid_multibyte,
        string_min_bytes_valid,
        string_min_bytes_valid_min,
        string_min_bytes_valid_multibyte,
        string_min_bytes_invalid,
        string_max_bytes_valid,
        string_max_bytes_valid_max,
        string_max_bytes_invalid,
        string_max_bytes_invalid_multibyte,
        string_min_max_bytes_valid,
        string_min_max_bytes_valid_min,
        string_min_max_bytes_valid_max,
        string_min_max_bytes_valid_multibyte,
        string_min_max_bytes_invalid_below,
        string_min_max_bytes_invalid_above,
        string_equal_min_max_bytes_valid,
        string_equal_min_max_bytes_invalid,
        string_pattern_valid,
        string_pattern_invalid,
        string_pattern_invalid_empty,
        string_pattern_invalid_null,
        string_pattern_escapes_valid,
        string_pattern_escapes_invalid,
        string_pattern_escapes_invalid_empty,
        string_prefix_valid,
        string_prefix_valid_only,
        string_prefix_invalid,
        string_prefix_invalid_case_sensitive,
        string_contains_valid,
        string_contains_valid_only,
        string_contains_invalid,
        string_contains_invalid_case_sensitive,
        string_not_contains_valid,
        string_not_contains_valid_case_sensitive,
        string_not_contains_invalid,
        string_not_contains_invalid_equal,
        string_suffix_valid,
        string_suffix_valid_only,
        string_suffix_invalid,
        string_suffix_invalid_case_sensitive,
        string_email_valid,
        string_email_valid_name,
        string_email_invalid,
        string_email_invalid_local_segment_too_long,
        string_email_invalid_hostname_too_long,
        string_email_invalid_bad_hostname,
        string_email_empty,
        string_address_valid_hostname,
        string_address_valid_hostname_uppercase,
        string_address_valid_hostname_hyphens,
        string_address_valid_hostname_trailing_dot,
        string_address_invalid_hostname,
        string_address_invalid_hostname_underscore,
        string_address_invalid_hostname_too_long,
        string_address_invalid_hostname_trailing_hyphens,
        string_address_invalid_hostname_leading_hyphens,
        string_address_invalid_hostname_empty,
        string_address_invalid_hostname_idns,
        string_address_valid_ip_v4,
        string_address_valid_ip_v6,
        string_address_invalid_ip,
        string_hostname_valid,
        string_hostname_valid_uppercase,
        string_hostname_valid_hyphens,
        string_hostname_valid_trailing_dot,
        string_hostname_invalid,
        string_hostname_invalid_underscore,
        string_hostname_invalid_too_long,
        string_hostname_invalid_trailing_hyphens,
        string_hostname_invalid_leading_hyphens,
        string_hostname_invalid_empty,
        string_hostname_invalid_idns,
        string_ip_valid_v4,
        string_ip_valid_v6,
        string_ip_invalid,
        string_ipv4_valid,
        string_ipv4_invalid,
        string_ipv4_invalid_erroneous,
        string_ipv4_invalid_v6,
        string_ipv6_valid,
        string_ipv6_valid_collapsed,
        string_ipv6_invalid,
        string_ipv6_invalid_v4,
        string_ipv6_invalid_erroneous,
        string_uri_valid_2,
        string_uri_invalid_2,
        string_uri_invalid_relative,
        string_uri_valid_3,
        string_uri_valid_relative,
        string_uri_invalid_3,
        string_uuid_valid_nil,
        string_uuid_valid_v1,
        string_uuid_valid_v1_case_insensitive,
        string_uuid_valid_v2,
        string_uuid_valid_v2_case_insensitive,
        string_uuid_valid_v3,
        string_uuid_valid_v3_case_insensitive,
        string_uuid_valid_v4,
        string_uuid_valid_v4_case_insensitive,
        string_uuid_valid_v5,
        string_uuid_valid_v5_case_insensitive,
        string_uuid_invalid,
        string_uuid_invalid_bad_uuid,
        string_uuid_valid_ignore_empty,
        string_http_header_name_valid,
        string_http_header_name_valid_2,
        string_http_header_name_valid_nums,
        string_http_header_name_valid_special_token,
        string_http_header_name_valid_period,
        string_http_header_name_invalid,
        string_http_header_name_invalid_2,
        string_http_header_name_invalid_space,
        string_http_header_name_invalid_return,
        string_http_header_name_invalid_tab,
        string_http_header_name_invalid_slash,
        string_http_header_value_valid,
        string_http_header_value_valid_uppercase,
        string_http_header_value_valid_spaces,
        string_http_header_value_valid_tab,
        string_http_header_value_valid_special_token,
        string_http_header_value_invalid_nul,
        string_http_header_value_invalid_del,
        string_http_header_value_invalid,
        string_non_strict_valid_header_valid,
        string_non_strict_valid_header_valid_uppercase,
        string_non_strict_valid_header_valid_spaces,
        string_non_strict_valid_header_valid_tab,
        string_non_strict_valid_header_valid_del,
        string_non_strict_valid_header_invalid_nul,
        string_non_strict_valid_header_invalid_cr,
        string_non_strict_valid_header_invalid_nl,
    ];
}
#[cfg(test)]
mod bytes {

    test_cases![
        bytes_none_valid,
        bytes_const_valid,
        bytes_const_invalid,
        bytes_in_valid,
        bytes_in_invalid,
        bytes_not_in_valid,
        bytes_not_in_invalid,
        bytes_len_valid,
        bytes_len_invalid_lt,
        bytes_len_invalid_gt,
        bytes_min_len_valid,
        bytes_min_len_valid_min,
        bytes_min_len_invalid,
        bytes_max_len_valid,
        bytes_max_len_valid_max,
        bytes_max_len_invalid,
        bytes_min_max_len_valid,
        bytes_min_max_len_valid_min,
        bytes_min_max_len_valid_max,
        bytes_min_max_len_invalid_below,
        bytes_min_max_len_invalid_above,
        bytes_equal_min_max_len_valid,
        bytes_equal_min_max_len_invalid,
        bytes_pattern_valid,
        bytes_pattern_invalid,
        bytes_pattern_invalid_empty,
        bytes_prefix_valid,
        bytes_prefix_valid_only,
        bytes_prefix_invalid,
        bytes_contains_valid,
        bytes_contains_valid_only,
        bytes_contains_invalid,
        bytes_suffix_valid,
        bytes_suffix_valid_only,
        bytes_suffix_invalid,
        bytes_suffix_invalid_case_sensitive,
        bytes_ip_valid_v4,
        bytes_ip_valid_v6,
        bytes_ip_invalid,
        bytes_ipv4_valid,
        bytes_ipv4_invalid,
        bytes_ipv4_invalid_v6,
        bytes_ipv6_valid,
        bytes_ipv6_invalid,
        bytes_ipv6_invalid_v4,
        bytes_ipv6_valid_ignore_empty,
    ];
}
#[cfg(test)]
mod r#enum {

    test_cases![
        enum_none_valid,
        enum_const_valid,
        enum_const_invalid,
        enum_alias_const_valid,
        enum_alias_const_valid_alias,
        enum_alias_const_invalid,
        enum_defined_only_valid,
        enum_defined_only_invalid,
        enum_alias_defined_only_valid,
        enum_alias_defined_only_invalid,
        enum_in_valid,
        enum_in_invalid,
        enum_alias_in_valid,
        enum_alias_in_valid_alias,
        enum_alias_in_invalid,
        enum_not_in_valid,
        enum_not_in_valid_undefined,
        enum_not_in_invalid,
        enum_alias_not_in_valid,
        enum_alias_not_in_invalid,
        enum_alias_not_in_invalid_alias,
        enum_external_defined_only_valid,
        enum_external_defined_only_invalid,
        enum_external_in_valid,
        enum_external_in_invalid,
        enum_external_not_in_valid,
        enum_external_not_in_invalid,
        enum_external_const_valid,
        enum_external_const_invalid,
        enum_repeated_defined_only_valid,
        enum_repeated_defined_only_invalid,
        enum_repeated_external_defined_only_valid,
        enum_repeated_external_defined_only_invalid,
        enum_repeated_another_external_defined_only_valid,
        enum_repeated_external_in_valid,
        enum_repeated_external_in_invalid,
        enum_repeated_external_not_in_valid,
        enum_repeated_external_not_in_invalid,
        enum_map_defined_only_valid,
        enum_map_defined_only_invalid,
        enum_map_external_defined_only_valid,
        enum_map_external_defined_only_invalid,
    ];
}
#[cfg(test)]
mod message {

    test_cases![
        message_none_valid,
        message_none_valid_unset,
        message_disabled_valid,
        message_disabled_valid_invalid_field,
        message_ignored_valid,
        message_ignored_valid_invalid_field,
        message_field_valid,
        message_field_valid_unset,
        message_field_invalid,
        message_field_invalid_transitive,
        message_skip_valid,
        message_required_valid,
        message_required_valid_oneof,
        message_required_invalid,
        message_required_invalid_oneof,
        message_cross_package_embed_none_valid,
        message_cross_package_embed_none_valid_nil,
        message_cross_package_embed_none_valid_empty,
        message_cross_package_embed_none_invalid,
        message_required_valid_2,
        message_required_valid_unset,
    ];
}
#[cfg(test)]
mod repeated {

    test_cases![
        repeated_none_valid,
        repeated_embed_none_valid,
        repeated_embed_none_valid_nil,
        repeated_embed_none_valid_empty,
        repeated_embed_none_invalid,
        repeated_cross_package_embed_none_valid,
        repeated_cross_package_embed_none_valid_nil,
        repeated_cross_package_embed_none_valid_empty,
        repeated_cross_package_embed_none_invalid,
        repeated_min_valid,
        repeated_min_valid_equal,
        repeated_min_invalid,
        repeated_min_invalid_element,
        repeated_max_valid,
        repeated_max_valid_equal,
        repeated_max_invalid,
        repeated_min_max_valid,
        repeated_min_max_valid_min,
        repeated_min_max_valid_max,
        repeated_min_max_invalid_below,
        repeated_min_max_invalid_above,
        repeated_exact_valid,
        repeated_exact_invalid_below,
        repeated_exact_invalid_above,
        repeated_unique_valid,
        repeated_unique_valid_empty,
        repeated_unique_valid_case_sensitivity,
        repeated_unique_invalid,
        repeated_items_valid,
        repeated_items_valid_empty,
        repeated_items_valid_pattern,
        repeated_items_invalid,
        repeated_items_invalid_pattern,
        repeated_items_invalid_in,
        repeated_items_valid_in,
        repeated_items_invalid_not_in,
        repeated_items_valid_not_in,
        repeated_items_invalid_enum_in,
        repeated_items_valid_enum_in,
        repeated_items_invalid_enum_not_in,
        repeated_items_valid_enum_not_in,
        repeated_items_invalid_embedded_enum_in,
        repeated_items_valid_embedded_enum_in,
        repeated_items_invalid_embedded_enum_not_in,
        repeated_items_valid_embedded_enum_not_in,
        repeated_items_invalid_any_in,
        repeated_items_valid_any_in,
        repeated_items_invalid_any_not_in,
        repeated_items_valid_any_not_in,
        repeated_embed_skip_valid,
        repeated_embed_skip_valid_invalid_element,
        repeated_min_and_items_len_valid,
        repeated_min_and_items_len_invalid_min,
        repeated_min_and_items_len_invalid_len,
        repeated_min_and_max_items_len_valid,
        repeated_min_and_max_items_len_invalid_min_len,
        repeated_min_and_max_items_len_invalid_max_len,
        repeated_duration_gte_valid,
        repeated_duration_gte_valid_empty,
        repeated_duration_gte_valid_equal,
        repeated_duration_gte_invalid,
        repeated_exact_valid_ignore_empty,
    ];
}
#[cfg(test)]
mod map {

    test_cases![
        map_none_valid,
        map_min_pairs_valid,
        map_min_pairs_valid_equal,
        map_min_pairs_invalid,
        map_max_pairs_valid,
        map_max_pairs_valid_equal,
        map_max_pairs_invalid,
        map_min_max_valid,
        map_min_max_valid_min,
        map_min_max_valid_max,
        map_min_max_invalid_below,
        map_min_max_invalid_above,
        map_exact_valid,
        map_exact_invalid_below,
        map_exact_invalid_above,
        map_no_sparse_valid,
        map_no_sparse_valid_empty,
        // sparse maps are no longer supported, so this case is no longer possible
        // "map_no_sparse_invalid", MapNoSparse{val: HashMap::from([(1, cases::map_no_sparse::Msg::default()), (2, None)])}, 1),
        map_keys_valid,
        map_keys_valid_empty,
        map_keys_valid_pattern,
        map_keys_valid_in,
        map_keys_valid_not_in,
        map_keys_invalid,
        map_keys_invalid_pattern,
        map_keys_invalid_in,
        map_keys_invalid_not_in,
        map_values_valid,
        map_values_valid_empty,
        map_values_valid_pattern,
        map_values_invalid,
        map_values_invalid_pattern,
        map_recursive_valid,
        map_recursive_invalid,
        map_exact_valid_ignore_empty,
        map_multiple_valid,
    ];
}
#[cfg(test)]
mod oneof {

    test_cases![
        oneof_none_valid,
        oneof_none_valid_empty,
        oneof_field_valid_x,
        oneof_field_valid_y,
        oneof_field_valid_z,
        oneof_field_valid_empty,
        oneof_field_invalid_x,
        oneof_field_invalid_y,
        oneof_filed_invalid_z,
        oneof_required_valid,
        oneof_require_invalid,
        oneof_ignore_empty_valid_x,
        oneof_ignore_empty_valid_y,
        oneof_ignore_empty_valid_z,
    ];
}
#[cfg(test)]
mod wrapper {

    test_cases![
        wrapper_none_valid,
        wrapper_none_valid_empty,
        wrapper_float_valid,
        wrapper_float_valid_empty,
        wrapper_float_invalid,
        wrapper_double_valid,
        wrapper_double_valid_empty,
        wrapper_double_invalid,
        wrapper_int64_valid,
        wrapper_int64_valid_empty,
        wrapper_int64_invalid,
        wrapper_int32_valid,
        wrapper_int32_valid_empty,
        wrapper_int32_invalid,
        wrapper_uint64_valid,
        wrapper_uint64_valid_empty,
        wrapper_uint64_invalid,
        wrapper_uint32_valid,
        wrapper_uint32_valid_empty,
        wrapper_uint32_invalid,
        wrapper_bool_valid,
        wrapper_bool_valid_empty,
        wrapper_bool_invalid,
        wrapper_string_valid,
        wrapper_string_valid_empty,
        wrapper_string_invalid,
        wrapper_bytes_valid,
        wrapper_bytes_valid_empty,
        wrapper_bytes_invalid,
        wrapper_required_string_valid,
        wrapper_required_string_invalid,
        wrapper_required_string_invalid_empty,
        wrapper_required_string_empty_valid,
        wrapper_required_string_empty_invalid,
        wrapper_required_string_empty_invalid_empty,
        wrapper_optional_string_uuid_valid,
        wrapper_optional_string_uuid_valid_empty,
        wrapper_optional_string_uuid_invalid,
        wrapper_required_float_valid,
        wrapper_required_float_invalid,
        wrapper_required_float_invalid_empty,
    ];
}
#[cfg(test)]
mod duration {

    test_cases![
        duration_none_valid,
        duration_required_valid,
        duration_required_invalid,
        duration_const_valid,
        duration_const_valid_empty,
        duration_const_invalid,
        duration_in_valid,
        duration_in_valid_empty,
        duration_in_invalid,
        duration_not_in_valid,
        duration_not_in_valid_empty,
        duration_not_in_invalid,
        duration_lt_valid,
        duration_lt_valid_empty,
        duration_lt_invalid_equal,
        duration_lt_invalid,
        duration_lte_valid,
        duration_lte_valid_empty,
        duration_lte_valid_equal,
        duration_lte_invalid,
        duration_gt_valid,
        duration_gt_valid_empty,
        duration_gt_invalid_equal,
        duration_gt_invalid,
        duration_gte_valid,
        duration_gte_valid_empty,
        duration_gte_valid_equal,
        duration_gte_invalid,
        duration_gt_lt_valid,
        duration_gt_lt_valid_empty,
        duration_gt_lt_invalid_above,
        duration_gt_lt_invalid_below,
        duration_gt_lt_invalid_max,
        duration_gt_lt_invalid_min,
        duration_exclusive_gt_lt_valid_empty,
        duration_exclusive_gt_lt_valid_above,
        duration_exclusive_gt_lt_valid_below,
        duration_exclusive_gt_lt_invalid,
        duration_exclusive_gt_lt_invalid_max,
        duration_exclusive_gt_lt_invalid_min,
        duration_gte_lte_valid,
        duration_gte_lte_valid_empty,
        duration_gte_lte_valid_max,
        duration_gte_lte_valid_min,
        duration_gte_lte_invalid_above,
        duration_gte_lte_invalid_below,
        duration_gte_lte_valid_empty_2,
        duration_exclusive_gte_lte_valid_above,
        duration_exclusive_gte_lte_valid_below,
        duration_exclusive_gte_lte_valid_max,
        duration_exclusive_gte_lte_valid_min,
        duration_exclusive_gte_lte_invalid,
        duration_fields_with_other_fields_invalid_other_field,
    ];
}
#[cfg(test)]
mod timestamp {

    test_cases![
        timestamp_none_valid,
        timestamp_required_valid,
        timestamp_required_invalid,
        timestamp_const_valid,
        timestamp_const_valid_empty,
        timestamp_const_invalid,
        timestamp_lt_valid,
        timestamp_lt_valid_empty,
        timestamp_lt_invalid_equal,
        timestamp_lt_invalid,
        timestamp_lte_valid,
        timestamp_lte_valid_empty,
        timestamp_lte_valid_equal,
        timestamp_lte_invalid,
        timestamp_gt_valid,
        timestamp_gt_valid_empty,
        timestamp_gt_invalid_equal,
        timestamp_gt_invalid,
        timestamp_gte_valid,
        timestamp_gte_valid_empty,
        timestamp_gte_valid_equal,
        timestamp_gte_invalid,
        timestamp_gt_lt_valid,
        timestamp_gt_lt_valid_empty,
        timestamp_gt_lt_invalid_above,
        timestamp_gt_lt_invalid_below,
        timestamp_gt_lt_invalid_max,
        timestamp_gt_lt_invalid_min,
        timestamp_exclusive_gt_lt_valid_empty,
        timestamp_exclusive_gt_lt_valid_above,
        timestamp_exclusive_gt_lt_valid_below,
        timestamp_exclusive_gt_lt_invalid,
        timestamp_exclusive_gt_lt_invalid_max,
        timestamp_exclusive_gt_lt_invalid_min,
        timestamp_gte_lte_valid,
        timestamp_gte_lte_valid_empty,
        timestamp_gte_lte_valid_max,
        timestamp_gte_lte_valid_min,
        timestamp_gte_lte_invalid_above,
        timestamp_gte_lte_invalid_below,
        timestamp_gte_lte_valid_empty_2,
        timestamp_exclusive_gte_lte_valid_above,
        timestamp_exclusive_gte_lte_valid_below,
        timestamp_exclusive_gte_lte_valid_max,
        timestamp_exclusive_gte_lte_valid_min,
        timestamp_exclusive_gte_lte_invalid,
        timestamp_lt_now_valid,
        timestamp_lt_now_valid_empty,
        timestamp_lt_now_invalid,
        timestamp_gt_now_valid,
        timestamp_gt_now_valid_empty,
        timestamp_gt_now_invalid,
        timestamp_within_valid,
        timestamp_within_valid_empty,
        timestamp_within_invalid_below,
        timestamp_within_invalid_above,
        timestamp_lt_now_within_valid,
        timestamp_lt_now_within_valid_empty,
        timestamp_lt_now_within_invalid_lt,
        timestamp_lt_now_within_invalid_within,
        timestamp_gt_now_within_valid,
        timestamp_gt_now_within_valid_empty,
        timestamp_gt_now_within_invalid_gt,
        timestamp_gt_now_within_invalid_within,
    ];
}
#[cfg(test)]
mod any {

    test_cases![
        any_none_valid,
        any_required_valid,
        any_required_invalid,
        any_in_valid,
        any_in_valid_empty,
        any_in_invalid,
        any_not_in_valid,
        any_not_in_valid_empty,
        any_not_in_invalid,
    ];
}
#[cfg(test)]
mod kitchensink {

    test_cases![
        kitchensink_field_valid,
        kitchensink_valid_unset,
        kitchensink_field_invalid,
        kitchensink_field_embedded_invalid,
        kitchensink_field_invalid_transitive,
        kitchensink_many_all_non_message_fields_invalid,
    ];
}
#[cfg(test)]
mod nested {
    test_cases![nested_wkt_uuid_field_valid, nested_wkt_uuid_field_invalid,];
}
